---
import BaseLayout from "../../layouts/BaseLayout.astro";
import { getCollection } from 'astro:content';
import { readingTime, excerptFrom } from "../../lib/content";
import { RIVERS } from "../../content/rivers";

export async function getStaticPaths({ paginate }) {
  const all = (await getCollection('journal')).filter(p => p.data.status !== 'draft').sort((a,b) => +b.data.date - +a.data.date);
  const featured = all.find(p => p.data.featured) ?? all[0];
  const nonFeatured = all.filter(p => p.id !== featured?.id);
  return paginate(nonFeatured, { pageSize: 6 });
}

const { page } = Astro.props;
const allPosts = (await getCollection('journal')).sort((a,b) => +b.data.date - +a.data.date);
const allTags = Array.from(new Set(allPosts.flatMap(p => p.data.tags))).sort();

// Build archives
const archiveMap = new Map<string, number>();
for (const p of allPosts) {
  const d = p.data.date;
  const key = `${d.getFullYear()}.${String(d.getMonth()+1).padStart(2,'0')}`;
  archiveMap.set(key, (archiveMap.get(key) ?? 0) + 1);
}
const archives = Array.from(archiveMap.entries()).sort((a,b) => a[0] < b[0] ? 1 : -1);
---
<BaseLayout activeNav="FEED">
  <aside class="sidebar">
    <section class="sidebar-section">
      <div class="sidebar-title">RIVERS</div>
      <div class="filter-tags">
        <a class="tag active" href="/">ALL POSTS</a>
        {Object.entries(RIVERS).map(([slug, r]) => (
          <a class="tag" style={`--rcolor:${r.color}`} href={`/rivers/${slug}`}>{r.label.toUpperCase()}</a>
        ))}
      </div>
    </section>
    <section class="sidebar-section">
      <div class="sidebar-title">ARCHIVE</div>
      <ul class="archive-list">
        {archives.map(([k,count]) => (
          <li class="archive-item" data-archive={k}><span class="archive-date">{k}</span><span class="archive-count">{count}</span></li>
        ))}
      </ul>
    </section>
  </aside>

  <main id="main" class="content-feed">
    <div class="announcement"><div class="announcement-text">JOURNAL FEED // PAGE {page.current} / {page.last}</div></div>

    <div class="feed-grid">
    {page.data.map(post => {
      const ex = post.data.excerpt || excerptFrom(post.body);
      return (
      <article class="post" style={`--rcolor:${RIVERS[post.data.river].color}`} data-river={post.data.river} data-date={post.data.date.toISOString().slice(0,10)}>
        <div class="post-header">
          <div>
            <div class="post-meta">
              <span class="post-date">{post.data.date.toISOString().slice(0,10)}</span>
            </div>
            <h2 class="post-title">{post.data.title}</h2>
          </div>
        </div>
        {ex && <p class="post-excerpt">{ex}</p>}
        <div class="post-footer">
          <a href={`/journal/${post.slug}`} class="read-more">READ ▸</a>
        </div>
      </article>
    )})}
    </div>

    <div style="display:flex; justify-content:space-between; margin-top:1rem;">
      {page.url.prev && <a id="prevLink" class="read-more" href={page.url.prev}>◂ Newer</a>}
      {page.url.next && <a id="nextLink" class="read-more" href={page.url.next}>Older ▸</a>}
    </div>
  </main>

  <!-- No JS filters on pagination feed; Rivers link to their pages. -->
</BaseLayout>
